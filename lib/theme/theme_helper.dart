import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray300,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.whiteA700;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.whiteA700;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.black900,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray300,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray700,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 14.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.redA70001,
          fontSize: 44.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 30.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 28.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 24.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray700,
          fontSize: 12.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.redA700,
          fontSize: 10.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 9.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
        titleLarge: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 20.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.primaryContainer,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 14.fSize,
          fontFamily: 'Pretendard',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Colors.black,
    primaryContainer: Color(0XFF1E1E1E),
    secondary: Color(0XFF1E1E1E),
    secondaryContainer: Color(0XFF5B6BFF),
    tertiary: Color(0XFF1E1E1E),
    tertiaryContainer: Color(0XFF5B6BFF),

    // Background colors
    background: Color(0XFF1E1E1E),

    // Surface colors
    surface: Color(0XFF1E1E1E),
    surfaceTint: Color(0XFF181818),
    surfaceVariant: Color(0XFF5B6BFF),

    // Error colors
    error: Color(0XFF181818),
    errorContainer: Color(0XFFEA4335),
    onError: Color(0XFF999999),
    onErrorContainer: Color(0XFF181818),

    // On colors(text colors)
    onBackground: Color(0XFFB8BDE8),
    onInverseSurface: Color(0XFF999999),
    onPrimary: Color(0XFF181818),
    onPrimaryContainer: Color(0XFFB8BDE8),
    onSecondary: Color(0XFFB8BDE8),
    onSecondaryContainer: Color(0XFF181818),
    onTertiary: Color(0XFFB8BDE8),
    onTertiaryContainer: Color(0XFF181818),

    // Other colors
    outline: Color(0XFF181818),
    outlineVariant: Color(0XFF1E1E1E),
    scrim: Color(0XFF1E1E1E),
    shadow: Color(0XFF181818),

    // Inverse colors
    inversePrimary: Color(0XFF1E1E1E),
    inverseSurface: Color(0XFF181818),

    // Pending colors
    onSurface: Color(0XFFB8BDE8),
    onSurfaceVariant: Color(0XFF181818),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD7D7D7);
  Color get blueGray10001 => Color(0XFFD6D6D6);
  Color get blueGray400 => Color(0XFF8A8A8A);
  Color get blueGray40001 => Color(0XFF888888);

  // BlueGrayC
  Color get blueGray900C1 => Color(0XC1313131);

  // DeepOrange
  Color get deepOrangeA400 => Color(0XFFFF1717);

  // Gray
  Color get gray100 => Color(0XFFF5F5F5);
  Color get gray300 => Color(0XFFE0E0E0);
  Color get gray400 => Color(0XFFC7C7C7);
  Color get gray40001 => Color(0XFFC9C9C9);
  Color get gray50 => Color(0XFFFFF7F8);
  Color get gray500 => Color(0XFF9B9B9B);
  Color get gray50001 => Color(0XFFA3A3A3);
  Color get gray50002 => Color(0XFF9D9D9D);
  Color get gray5001 => Color(0XFFF4F5FF);
  Color get gray5002 => Color(0XFFF8F8F8);
  Color get gray600 => Color(0XFF787878);
  Color get gray700 => Color(0XFF555555);
  Color get gray800 => Color(0XFF454545);
  Color get gray900 => Color(0XFF191919);

  // Green
  Color get greenA100 => Color(0XFFC9FFD8);
  Color get greenA700 => Color(0XFF03C75A);
  Color get greenA70001 => Color(0XFF00C82C);

  // Indigo
  Color get indigo50 => Color(0XFFDADEFF);
  Color get indigoA200 => Color(0XFFDADEFF);
  Color get indigoText => Color(0XFF5B6CFF);

  // Orange
  Color get orange50 => Color(0XFFFFF8D6);

  // Red
  Color get red100 => Color(0XFFFFD0D5);
  Color get redA400 => Color(0XFFFC2D52);
  Color get redA700 => Color(0XFFFF0000);
  Color get redA70001 => Color(0XFFFF0C0C);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellowA400 => Color(0XFFFEE500);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
